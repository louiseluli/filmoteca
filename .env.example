# ============================================================================
# FILMOTECA - Environment Variables Template
# ============================================================================
# This is a TEMPLATE file showing required environment variables.
# Your actual .env file (with real keys) is in .gitignore and won't be committed.
#
# üîß SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Fill in your actual API keys in the .env file
# 3. Never commit your .env file to git!
#
# üîë HOW TO GET API KEYS:
# See detailed instructions below each section
# ============================================================================

# ============================================================================
# API KEYS - REQUIRED FOR DATA ENRICHMENT
# ============================================================================

# ----------------------------------------------------------------------------
# TMDB (The Movie Database) - Movie metadata, posters, cast info
# ----------------------------------------------------------------------------
# üåê GET KEY: https://www.themoviedb.org/settings/api
# üìù STEPS:
#    1. Create free account at themoviedb.org
#    2. Go to Settings > API
#    3. Request API Key (choose "Developer" option)
#    4. Copy both API Key (v3) and Read Access Token (v4)
#
# üéØ USED FOR: Movie posters, backdrops, cast photos, plot keywords, 
#              streaming availability, alternative titles
#
# üîß CUSTOMIZE: If you don't need TMDB data, leave empty (enrichment will skip)
TMDB_API_KEY=your_tmdb_api_key_here
TMDB_READ_TOKEN=your_tmdb_read_access_token_here

# ----------------------------------------------------------------------------
# OMDB (Open Movie Database) - Additional movie metadata
# ----------------------------------------------------------------------------
# üåê GET KEY: http://www.omdbapi.com/apikey.aspx
# üìù STEPS:
#    1. Go to omdbapi.com/apikey.aspx
#    2. Choose FREE tier (1,000 requests/day)
#    3. Enter email and submit
#    4. Check email and activate API key
#
# üéØ USED FOR: Additional ratings (Rotten Tomatoes, Metacritic),
#              box office data, awards information
#
# üîß CUSTOMIZE: Optional - leave empty if not needed
OMDB_API_KEY=your_omdb_api_key_here

# ----------------------------------------------------------------------------
# Does the Dog Die (DDD) - Content warnings and triggers
# ----------------------------------------------------------------------------
# üåê GET KEY: https://www.doesthedogdie.com/api
# üìù STEPS:
#    1. Visit doesthedogdie.com
#    2. Contact them for API access (currently in beta)
#    3. May require Patreon support
#
# üéØ USED FOR: Content warnings (animal death, violence, triggers),
#              accessibility information for sensitive viewers
#
# üîß CUSTOMIZE: Optional - this is a nice-to-have feature
#              If you can't get key, enrichment will skip this source
DDD_API_KEY=your_doesthedogdie_api_key_here

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# ----------------------------------------------------------------------------
# Database URL - SQLite for local development, PostgreSQL for production
# ----------------------------------------------------------------------------
# üéØ LOCAL DEVELOPMENT: Use SQLite (no setup required)
DATABASE_URL=sqlite:///data/raw/imdb.db

# üéØ PRODUCTION: Use PostgreSQL (uncomment and configure for deployment)
# DATABASE_URL=postgresql://username:password@localhost:5432/filmoteca
#
# üîß CUSTOMIZE: 
# - For Heroku: They provide DATABASE_URL automatically
# - For Railway: Use their PostgreSQL plugin
# - For local PostgreSQL: Install PostgreSQL and create database
#   then: DATABASE_URL=postgresql://yourusername:yourpassword@localhost:5432/filmoteca

# ============================================================================
# FILE PATHS - PROJECT STRUCTURE
# ============================================================================
# These define where data files are stored in your project

# Main data directory
DATA_DIR=./data

# Raw data (IMDb datasets, your Watched.csv)
RAW_DATA_DIR=./data/raw

# Processed data (cleaned, enriched JSON files)
PROCESSED_DATA_DIR=./data/processed

# Analysis reports and EDA outputs
REPORTS_DIR=./data/reports

# Application logs
LOGS_DIR=./data/logs

# üîß CUSTOMIZE: Change these if you prefer different folder structure
# Example: DATA_DIR=/Users/yourname/filmoteca_data

# ============================================================================
# INPUT FILE PATHS - YOUR DATA
# ============================================================================

# Your IMDb watched history CSV
# üîß IMPORTANT: Update this path to match your actual file location
WATCHLIST_FILE=./data/raw/Watched.csv

# Ground truth file for validation (optional)
# üéØ USED FOR: Validating recommendation accuracy if you have test data
GROUND_TRUTH_FILE=./data/ground_truth_verified.csv

# IMDb database file
IMDB_DATABASE=./data/raw/imdb.db

# üîß CUSTOMIZE: Add any other input files you have
# Example: RATINGS_FILE=./data/raw/my_ratings.csv

# ============================================================================
# API CONFIGURATION - FOR FUTURE API BACKEND (OPTIONAL)
# ============================================================================
# If you decide to build a FastAPI backend later, these control the server

# API server host (0.0.0.0 allows external connections)
API_HOST=0.0.0.0

# API server port
API_PORT=8000

# Enable auto-reload on code changes (development only)
API_RELOAD=True

# üîß CUSTOMIZE: Change port if 8000 is already in use
# Example: API_PORT=8080

# ============================================================================
# RECOMMENDATION ENGINE SETTINGS
# ============================================================================
# These control how movie recommendations are generated

# Minimum rating to consider for recommendations (1-10 scale)
# üéØ MEANING: Only recommend movies you rated >= this value
MIN_RATING_THRESHOLD=6.0

# Number of recommendations to generate
# üéØ MEANING: How many movies to suggest in each recommendation list
TOP_N_RECOMMENDATIONS=20

# Similarity threshold for content-based recommendations (0-1 scale)
# üéØ MEANING: How similar movies need to be (0.3 = 30% similar)
SIMILARITY_THRESHOLD=0.3

# üîß CUSTOMIZE: Adjust based on your preferences
# - Higher MIN_RATING_THRESHOLD = stricter recommendations
# - More TOP_N_RECOMMENDATIONS = longer lists
# - Higher SIMILARITY_THRESHOLD = more conservative recommendations

# ============================================================================
# FEATURE WEIGHTS - HYBRID RECOMMENDATION ALGORITHM
# ============================================================================
# These weights control how different features influence recommendations
# All weights should sum to 1.0 (100%)

# Genre similarity weight
# üéØ MEANING: How much genre matching matters
WEIGHT_GENRE=0.25

# Director similarity weight
# üéØ MEANING: How much director preference matters
WEIGHT_DIRECTOR=0.20

# Actor similarity weight
# üéØ MEANING: How much cast preference matters
WEIGHT_ACTORS=0.15

# Plot keywords similarity weight
# üéØ MEANING: How much plot themes matter
WEIGHT_KEYWORDS=0.15

# Release year proximity weight
# üéØ MEANING: How much era/decade matters
WEIGHT_YEAR=0.10

# Rating similarity weight
# üéØ MEANING: How much rating quality matters
WEIGHT_RATING=0.10

# Semantic embedding similarity weight
# üéØ MEANING: How much plot description meaning matters
WEIGHT_EMBEDDING=0.05

# üîß CUSTOMIZE: Adjust weights to match your preferences
# Example: If you care most about directors:
#   WEIGHT_DIRECTOR=0.40, WEIGHT_GENRE=0.20, etc.
#
# ‚ö†Ô∏è IMPORTANT: All weights must sum to 1.0!
# Use this to calculate: 0.25+0.20+0.15+0.15+0.10+0.10+0.05 = 1.00

# ============================================================================
# CACHE SETTINGS - PERFORMANCE OPTIMIZATION
# ============================================================================
# Caching speeds up repeated operations by storing results

# Enable/disable caching
ENABLE_CACHE=True

# Cache time-to-live in hours
# üéØ MEANING: How long to keep cached data before refreshing
CACHE_TTL_HOURS=24

# üîß CUSTOMIZE: 
# - Set to False to disable caching (slower but always fresh data)
# - Increase TTL for slower-changing data
# - Decrease TTL for frequently-updated data

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
# Controls how application logs are generated

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
# üéØ MEANING: How verbose the logs should be
#   - DEBUG: Everything (very detailed, for troubleshooting)
#   - INFO: Normal operations (recommended for development)
#   - WARNING: Only warnings and errors (production)
#   - ERROR: Only errors (production)
LOG_LEVEL=INFO

# Log file path
LOG_FILE=./data/logs/filmoteca.log

# üîß CUSTOMIZE: Change to DEBUG when troubleshooting issues
# Example: LOG_LEVEL=DEBUG

# ============================================================================
# EXTERNAL API RATE LIMITING
# ============================================================================
# Prevents hitting API rate limits by controlling request frequency

# TMDB rate limit (requests per second)
# üéØ TMDB allows 40 requests per 10 seconds = 4 req/sec
TMDB_RATE_LIMIT=40

# OMDB rate limit (requests per day)
# üéØ Free tier: 1,000 requests per day
OMDB_RATE_LIMIT=1000

# üîß CUSTOMIZE: If you upgrade to paid tiers, increase these limits
# TMDB paid: No rate limit
# OMDB paid: 100,000+ requests/day

# ============================================================================
# PROCESSING CONFIGURATION - PERFORMANCE TUNING
# ============================================================================

# Number of parallel workers for API requests
# üéØ MEANING: How many concurrent API calls to make
# üîß CUSTOMIZE: Increase for faster processing, decrease if getting rate limited
PARALLEL_WORKERS=5

# Batch size for processing movies
# üéØ MEANING: How many movies to process before saving progress
BATCH_SIZE=100

# Retry attempts for failed API calls
# üéØ MEANING: How many times to retry if API call fails
MAX_RETRIES=3

# Delay between retries (seconds)
RETRY_DELAY=2

# üîß CUSTOMIZE: Based on your internet speed and API reliability

# ============================================================================
# DATA EXPORT SETTINGS
# ============================================================================

# Export format for processed data: json, parquet, csv
EXPORT_FORMAT=json

# Include raw IMDb data in exports (True/False)
INCLUDE_RAW_DATA=False

# Compress exported files (True/False)
COMPRESS_EXPORTS=True

# üîß CUSTOMIZE:
# - json: Best for web apps (GitHub Pages)
# - parquet: Best for data analysis (smaller, faster)
# - csv: Best for Excel/manual inspection

# ============================================================================
# üîß YOUR CUSTOM VARIABLES
# ============================================================================
# Add any additional environment variables below this line:

# Example: Custom API endpoints
# CUSTOM_API_URL=https://api.example.com

# Example: Feature flags
# ENABLE_EXPERIMENTAL_FEATURES=False

# Example: Third-party integrations
# LETTERBOXD_USERNAME=your_username
# TRAKT_API_KEY=your_trakt_key